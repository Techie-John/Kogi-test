"""
Django settings for musicsite project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kidhg)(4!m@6*r+*tmc$#tg75_5#u(=td746=r&9ok$cje8n(v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'music',
    'accounts',
    #'playlist',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'musicsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'musicsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
MEDIA_URL = 'media/'
MEDIA_ROOT = 'media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "/"

EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
EMAIL_FILE_PATH = BASE_DIR / "sent_emails"

AUTH_USER_MODEL = 'accounts.User'


'''
Sure, I can help you with that! Implementing a playlist feature on your Django music streaming site can be a great way to enhance user engagement and provide a more personalized experience for your users.

To get started, we'll need to create a new app within your Django project to handle the playlist functionality. Let's call it playlists.

1. Create a new app:

python manage.py startapp playlists

2. In the playlists app, create a new model for playlists and songs. For example:
python
# models.py
from django.db import models
from django.contrib.auth.models import User

class Playlist(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Song(models.Model):
    title = models.CharField(max_length=255)
    artist = models.CharField(max_length=255)
    album = models.CharField(max_length=255)
    playlist = models.ForeignKey(Playlist, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

3. Create a new view for handling playlist functionality. For example:
python
# views.py
from django.shortcuts import render, redirect
from .models import Playlist, Song
from .forms import PlaylistForm, SongForm

def playlist_list(request):
    playlists = Playlist.objects.all()
    return render(request, 'playlists/playlist_list.html', {'playlists': playlists})

def playlist_create(request):
    if request.method == 'POST':
        form = PlaylistForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('playlist_list')
    else:
        form = PlaylistForm()
    return render(request, 'playlists/playlist_create.html', {'form': form})

def playlist_detail(request, pk):
    playlist = Playlist.objects.get(pk=pk)
    songs = playlist.songs.all()
    return render(request, 'playlists/playlist_detail.html', {'playlist': playlist, 'songs': songs})

def playlist_edit(request, pk):
    playlist = Playlist.objects.get(pk=pk)
    if request.method == 'POST':
        form = PlaylistForm(request.POST, instance=playlist)
        if form.is_valid():
            form.save()
            return redirect('playlist_detail', pk=playlist.pk)
    else:
        form = PlaylistForm(instance=playlist)
    return render(request, 'playlists/playlist_edit.html', {'form': form})

def song_create(request, pk):
    playlist = Playlist.objects.get(pk=pk)
    if request.method == 'POST':
        form = SongForm(request.POST, playlist=playlist)
        if form.is_valid():
            form.save()
            return redirect('playlist_detail', pk=playlist.pk)
    else:
        form = SongForm(playlist=playlist)
    return render(request, 'playlists/song_create.html', {'form': form})

4. Create forms for creating and editing playlists and songs. For example:
python
# forms.py
from django import forms
from .models import Playlist, Song

class PlaylistForm(forms.ModelForm):
    class Meta:
        model = Playlist
        fields = ('name', 'description')

class SongForm(forms.ModelForm):
    class Meta:
        model = Song
        fields = ('title', 'artist', 'album')

5. Create templates for each view. For example:

playlist_list.html:
html
{% extends 'base.html' %}

{% block content %}
  <h1>Playlists</h1>
  <ul>
    {% for playlist in playlists %}
      <li>
        <a href="{% url 'playlist_detail' playlist.pk %}">{{ playlist.name }}</a>
      </li>
    {% endfor %}
  </ul>
{% endblock %}

playlist_create.html:
html
{% extends 'base.html' %}

{% block content %}
  <h1>Create Playlist</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Create</button>
  </form>
{% endblock %}

playlist_detail.html:
html
{% extends 'base.html' %}

{% block content %}
  <h1>{{ playlist.name }}</h1>
  <ul>
    {% for song in songs %}
      <li>
        <a href="{% url 'song_detail' song.pk %}">{{ song.title }}</a>
      </li>
    {% endfor %}
  </ul>
{% endblock %}

playlist_edit.html:
html
{% extends 'base.html' %}

{% block content %}
  <h1>Edit Playlist</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save Changes</button>
  </form>
{% endblock %}

song_create.html:
html
{% extends 'base.html' %}

{% block content %}
  <h1>Add Song to Playlist</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Add Song</button>
  </form>
{% endblock %}

6. Finally, update your URLs to include the new views:
python
# urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('playlists/', views.playlist_list, name='playlist_list'),
    path('playlists/create/', views.playlist_create, name='playlist_create'),
    path('playlists/<int:pk>/detail/', views.playlist_detail, name='playlist_detail'),
    path('playlists/<int:pk>/edit/', views.playlist_edit, name='playlist_edit'),
    path('playlists/<int:pk>/songs/create/', views.song_create, name='song_create'),
]

That's it! Now you should have a basic playlist feature implemented on your Django music streaming site. Of course, this is just a starting point, and you can customize and expand on this code to fit your specific needs.
'''